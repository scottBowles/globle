{"version":3,"file":"static/js/417.ee99e199.chunk.js","mappings":"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","sources":["components/Globe.tsx","util/centre.ts","util/turnGlobe.tsx"],"sourcesContent":["import { useContext, useEffect, useRef, useState } from \"react\";\nimport ReactGlobe, { GlobeMethods } from \"react-globe.gl\";\nimport { Country } from \"../lib/country\";\nimport { findCentre } from \"../util/centre\";\nimport { answerCountry } from \"../util/answer\";\nimport { turnGlobe } from \"../util/turnGlobe\";\nimport { ThemeContext } from \"../context/ThemeContext\";\nimport { getColour } from \"../util/colour\";\nimport useCheckMobile from \"../hooks/useCheckMobile\";\nconst territoryData: Country[] = require(\"../data/territories.json\").features;\n\ntype Props = {\n  guesses: Country[];\n  globeRef: React.MutableRefObject<GlobeMethods>;\n};\n\nexport default function Globe({ guesses, globeRef }: Props) {\n  // State\n  const [places, setPlaces] = useState(guesses);\n\n  // Theme\n  const { nightMode, highContrast } = useContext(ThemeContext).theme;\n\n\n  // Check device\n  const isMobile = useCheckMobile();\n\n  // Globe size settings\n  const size = isMobile ? 320 : 600; // px on one side\n  const extraStyle = {\n    width: `${size}px`,\n    clipPath: `circle(${size / 2}px at ${size / 2}px ${size / 2}px)`,\n  };\n\n  // After each guess\n  useEffect(() => {\n    // Add territories to guesses to make shapes\n    const territories: Country[] = [];\n    guesses.forEach((guess) => {\n      const territory = territoryData.find((territory) => {\n        return guess.properties.NAME === territory.properties.SOVEREIGNT;\n      });\n      if (territory) territories.push(territory);\n    });\n    setPlaces(guesses.concat(territories));\n\n    // Turn globe to new spot\n    const controls: any = globeRef.current.controls();\n    controls.autoRotate = false;\n    const newGuess = [...guesses].pop();\n    if (newGuess) {\n      const newSpot = findCentre(newGuess);\n      turnGlobe(newSpot, globeRef);\n    }\n  }, [guesses, globeRef]);\n\n  // On first render\n  useEffect(() => {\n    const controls: any = globeRef.current.controls();\n    controls.autoRotate = true;\n    controls.autoRotateSpeed = 1;\n    setTimeout(() => {\n      globeRef.current.pointOfView({ lat: 0, lng: 0, altitude: 1.5 });\n    }, 400);\n  }, [globeRef]);\n\n  // Stop rotate on drag\n  const containerRef = useRef<HTMLDivElement>(null!);\n  useEffect(() => {\n    const controls: any = globeRef.current.controls();\n    containerRef.current.addEventListener(\"mouseup\", () => {\n      controls.autoRotate = false;\n    });\n    containerRef.current.addEventListener(\"touchend\", () => {\n      controls.autoRotate = false;\n    });\n  }, [globeRef]);\n\n  // Label colour\n  function getLabel(country: Country) {\n    const name = country.properties.ADMIN;\n    const prox = country.proximity;\n    const dayColour = prox < 750_000 ? \"gray-300\" : \"gray-900\";\n    const nightColour = \"gray-300\";\n    const label = `<b class=\"text-${dayColour} dark:text-${nightColour}\">${name}</b>`;\n    return label;\n  }\n\n  // Polygon altitude\n  function getAltitude(country: Country) {\n    if (!highContrast || country.properties.TYPE === \"Territory\") return 0.01;\n    const prox = country.proximity;\n    let proxFraction = prox / 2_000_000;\n    proxFraction = Math.min(Math.max(proxFraction, 0.01), 0.95);\n    let alt = (1 - proxFraction) / 10;\n    return alt;\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"mx-auto cursor-grab text-center\"\n      style={extraStyle}\n    >\n      <ReactGlobe\n        ref={globeRef}\n        globeImageUrl={`images/earth-${nightMode ? \"night\" : \"day\"}.webp`}\n        width={size}\n        height={size}\n        backgroundColor=\"#00000000\"\n        polygonsData={places}\n        polygonCapColor={(c) =>\n          // @ts-ignore\n          getColour(c, answerCountry, nightMode, highContrast)\n        }\n        // @ts-ignore\n        polygonLabel={getLabel}\n        // @ts-ignore\n        polygonAltitude={getAltitude}\n        polygonSideColor=\"blue\"\n        onGlobeClick={(d) => turnGlobe(d, globeRef)}\n        onPolygonClick={(p, e, c) => turnGlobe(c, globeRef)}\n        polygonStrokeColor=\"#00000000\"\n        atmosphereColor={nightMode ? \"rgba(63, 201, 255)\" : \"lightskyblue\"}\n      />\n    </div>\n  );\n}\n","import { Country } from '../lib/country';\n\nexport function findCentre(country: Country) {\n  const { bbox } = country;\n  const [lng1, lat1, lng2, lat2] = bbox;\n  let latitude = (lat1 + lat2) / 2;\n  const longitude = (lng1 + lng2) / 2;\n  return {lat: latitude, lng: longitude};\n}\n\n\n","import { GlobeMethods } from \"react-globe.gl\";\n\nexport function turnGlobe(\n  coords: {\n    lat: number;\n    lng: number;\n    altitude?: number;\n  },\n  globeRef: React.MutableRefObject<GlobeMethods>\n) {\n  const controls: any = globeRef.current.controls();\n  controls.autoRotate = false;\n  const currentAlt = globeRef.current.pointOfView().altitude;\n  coords[\"altitude\"] = Math.max(currentAlt, 0.05);\n  globeRef.current.pointOfView(coords, 250);\n}\n"],"names":["territoryData","require","Globe","guesses","globeRef","useState","places","setPlaces","useContext","ThemeContext","theme","nightMode","highContrast","size","useCheckMobile","extraStyle","width","clipPath","useEffect","territories","forEach","guess","territory","find","properties","NAME","SOVEREIGNT","push","concat","current","controls","autoRotate","newGuess","pop","newSpot","findCentre","turnGlobe","autoRotateSpeed","setTimeout","pointOfView","lat","lng","altitude","containerRef","useRef","addEventListener","ref","className","style","globeImageUrl","height","backgroundColor","polygonsData","polygonCapColor","c","getColour","answerCountry","polygonLabel","country","name","ADMIN","prox","proximity","polygonAltitude","TYPE","proxFraction","Math","min","max","polygonSideColor","onGlobeClick","d","onPolygonClick","p","e","polygonStrokeColor","atmosphereColor","bbox","lng1","lat1","lng2","coords","currentAlt"],"sourceRoot":""}