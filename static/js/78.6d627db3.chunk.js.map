{"version":3,"file":"static/js/78.6d627db3.chunk.js","mappings":"8MASO,SAASA,EAAT,GAAkD,IAA/BC,EAA8B,EAA9BA,IAAKC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,QAC9BC,GAAWC,EAAAA,EAAAA,KACjB,OAAIH,GACK,cAAGI,UAAU,gBAAb,SAA8BJ,IAC5BD,GAEP,eAAGK,UAAU,sCAAb,oCAC0BC,EAAAA,EAD1B,OAImB,IAAZJ,GAEP,cAAGG,UAAU,oCAAb,qEAImB,IAAZH,GAEP,eAAGG,UAAU,oCAAb,mBACSF,EAAW,MAAQ,QAD5B,mEAMK,cAAGE,UAAU,kB,2QC3BlBE,EAAyBC,EAAAA,MAAAA,EAShB,SAASC,EAAT,GAA+D,IAA5CP,EAA2C,EAA3CA,QAASQ,EAAkC,EAAlCA,WAAYV,EAAsB,EAAtBA,IAAKW,EAAiB,EAAjBA,OAC1D,GAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOX,EAAP,KAAcc,EAAd,KAEA,SAASC,EAAYC,EAAqBC,GACxC,OAAOA,EAAKC,MAAK,SAACC,GAChB,MACEA,EAAQC,WADFC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,UAAWC,EAAzB,EAAyBA,OAAQC,EAAjC,EAAiCA,MAAOC,EAAxC,EAAwCA,SAAUC,EAAlD,EAAkDA,UAElD,OACEL,EAAKM,gBAAkBX,GACvBM,EAAUK,gBAAkBX,GAC5BQ,EAAMG,gBAAkBX,GACxBO,EAAOI,gBAAkBX,GACzBO,EAAOK,QAAQ,MAAO,IAAID,gBAAkBX,GAC5CK,EAAKO,QAAQ,KAAM,KAAKD,gBAAkBX,GAC1CS,EAASE,gBAAkBX,GAC3BU,EAAUC,gBAAkBX,KA2ClC,OACE,iBAAKZ,UAAU,uCAAf,WACE,kBACEyB,SAdN,SAAkBC,GAChBA,EAAEC,iBACFjB,EAAS,IACT,IAAIkB,EA7BN,WACE,IAAMC,EAAcrB,EACjBsB,OACAP,cACAC,QAAQ,KAAM,OACdA,QAAQ,SAAU,QACfO,EAAcC,EAAAA,MAAoB,SAACC,GACvC,OAAOA,EAAKC,MAAQL,KAEhBM,EAAYJ,EAAcA,EAAYK,KAAOP,EAC7CD,EAAejB,EAAYwB,EAAWjC,GAE5C,GADuBS,EAAYwB,EAAWtC,GAE5Ca,EAAS,+BADX,CAIA,GAAKkB,EAOL,OAHIA,EAAaZ,WAAWC,OAAShB,EAAAA,GACnCK,GAAO,GAEFsB,EANLlB,EAAS,yBAYQ2B,GACfT,GAAgBU,EAAAA,IAClBV,EAAY,WAAgBW,EAAAA,EAAAA,GAAgBX,EAAcU,EAAAA,GAC1DjC,EAAW,GAAD,eAAKR,GAAL,CAAc+B,KACxBnB,EAAa,MAQXT,UAAU,kDAFZ,WAIE,kBACEA,UAAU,0KAKVwC,KAAK,OACLC,KAAK,UACLC,GAAG,UACHC,MAAOnC,EACPoC,SAAU,SAAClB,GAAD,OAAOjB,EAAaiB,EAAEmB,cAAcF,QAC9CG,SAAUnD,EACVoD,YAAgC,IAAnBlD,EAAQmD,OAAe,0BAA4B,GAChEC,aAAa,kBAEf,mBACEjD,UAAU,wKAEVwC,KAAK,SACLM,SAAUnD,EAJZ,uBASF,SAACD,EAAD,CAASC,IAAKA,EAAKC,MAAOA,EAAOC,QAASA,EAAQmD","sources":["components/Message.tsx","components/Guesser.tsx"],"sourcesContent":["import useCheckMobile from \"../hooks/useCheckMobile\";\nimport { answerName } from \"../util/answer\";\n\ntype Props = {\n  win: boolean;\n  error: string;\n  guesses: number;\n};\n\nexport function Message({ win, error, guesses }: Props) {\n  const isMobile = useCheckMobile();\n  if (error) {\n    return <p className=\"text-red-700 \">{error}</p>;\n  } else if (win) {\n    return (\n      <p className=\"text-green-800 dark:text-green-300 \">\n        The Mystery Country is {answerName}!\n      </p>\n    );\n  } else if (guesses === 0) {\n    return (\n      <p className=\"text-gray-700 dark:text-gray-400 \">\n        Enter the name of any country to make your first guess.\n      </p>\n    );\n  } else if (guesses === 1) {\n    return (\n      <p className=\"text-gray-700 dark:text-gray-400 \">\n        Drag, {isMobile ? \"tap\" : \"click\"}, and zoom-in on the globe to help you\n        find your next guess.\n      </p>\n    );\n  } else {\n    return <p className=\"text-red-700 \"></p>;\n  }\n}\n","import { FormEvent, useState } from \"react\";\nimport { Country } from \"../lib/country\";\nimport { answerCountry, answerName } from \"../util/answer\";\nimport { Message } from \"./Message\";\nimport { polygonDistance } from \"../util/distance\";\nimport alternateNames from \"../data/alternate_names.json\";\nconst countryData: Country[] = require(\"../data/country_data.json\").features;\n\ntype Props = {\n  guesses: Country[];\n  setGuesses: React.Dispatch<React.SetStateAction<Country[]>>;\n  win: boolean;\n  setWin: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport default function Guesser({ guesses, setGuesses, win, setWin }: Props) {\n  const [guessName, setGuessName] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  function findCountry(countryName: string, list: Country[]) {\n    return list.find((country) => {\n      const { NAME, NAME_LONG, ABBREV, ADMIN, BRK_NAME, NAME_SORT } =\n        country.properties;\n      return (\n        NAME.toLowerCase() === countryName ||\n        NAME_LONG.toLowerCase() === countryName ||\n        ADMIN.toLowerCase() === countryName ||\n        ABBREV.toLowerCase() === countryName ||\n        ABBREV.replace(/\\./g, \"\").toLowerCase() === countryName ||\n        NAME.replace(/-/g, \" \").toLowerCase() === countryName ||\n        BRK_NAME.toLowerCase() === countryName ||\n        NAME_SORT.toLowerCase() === countryName\n      );\n    });\n  }\n\n  // Check territories function\n  function runChecks() {\n    const trimmedName = guessName\n      .trim()\n      .toLowerCase()\n      .replace(/&/g, \"and\")\n      .replace(/^st\\s/g, \"st. \");\n    const oldNamePair = alternateNames.find((pair) => {\n      return pair.old === trimmedName;\n    });\n    const userGuess = oldNamePair ? oldNamePair.real : trimmedName;\n    const guessCountry = findCountry(userGuess, countryData);\n    const alreadyGuessed = findCountry(userGuess, guesses);\n    if (alreadyGuessed) {\n      setError(\"Country already guessed\");\n      return;\n    }\n    if (!guessCountry) {\n      setError(\"Invalid country name\");\n      return;\n    }\n    if (guessCountry.properties.NAME === answerName) {\n      setWin(true);\n    }\n    return guessCountry;\n  }\n\n  function addGuess(e: FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    setError(\"\");\n    let guessCountry = runChecks();\n    if (guessCountry && answerCountry) {\n      guessCountry[\"proximity\"] = polygonDistance(guessCountry, answerCountry);\n      setGuesses([...guesses, guessCountry]);\n      setGuessName(\"\");\n    }\n  }\n\n  return (\n    <div className=\"mt-10 mb-6 block mx-auto text-center\">\n      <form\n        onSubmit={addGuess}\n        className=\"w-80 flex space-x-4 mx-auto my-2 justify-center\"\n      >\n        <input\n          className=\"shadow px-2 py-1 md:py-0\n          text-gray-700 dark:bg-slate-300 focus:outline-none \n          focus:shadow-outline disabled:bg-slate-400\n          border rounded disabled:border-slate-400\n          w-full\"\n          type=\"text\"\n          name=\"guesser\"\n          id=\"guesser\"\n          value={guessName}\n          onChange={(e) => setGuessName(e.currentTarget.value)}\n          disabled={win}\n          placeholder={guesses.length === 0 ? \"Enter country name here\" : \"\"}\n          autoComplete=\"new-password\"\n        />\n        <button\n          className=\"bg-blue-700 dark:bg-purple-800 hover:bg-blue-900 dark:hover:bg-purple-900 disabled:bg-blue-900  text-white \n          font-bold py-1 md:py-2 px-4 rounded focus:shadow-outline \"\n          type=\"submit\"\n          disabled={win}\n        >\n          Enter\n        </button>\n      </form>\n      <Message win={win} error={error} guesses={guesses.length} />\n    </div>\n  );\n}\n"],"names":["Message","win","error","guesses","isMobile","useCheckMobile","className","answerName","countryData","require","Guesser","setGuesses","setWin","useState","guessName","setGuessName","setError","findCountry","countryName","list","find","country","properties","NAME","NAME_LONG","ABBREV","ADMIN","BRK_NAME","NAME_SORT","toLowerCase","replace","onSubmit","e","preventDefault","guessCountry","trimmedName","trim","oldNamePair","alternateNames","pair","old","userGuess","real","runChecks","answerCountry","polygonDistance","type","name","id","value","onChange","currentTarget","disabled","placeholder","length","autoComplete"],"sourceRoot":""}