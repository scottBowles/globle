{"version":3,"file":"static/js/249.3e96af5e.chunk.js","mappings":"0NAaA,SAASA,EAAeC,GACtB,OAAO,OAAIA,GAAWC,MAAK,SAACC,EAAGC,GAC7B,OAAID,EAAEE,WAAWC,OAASC,EAAAA,GAChB,EACCH,EAAEC,WAAWC,OAASC,EAAAA,EACxB,EAEAJ,EAAEK,UAAYJ,EAAEI,aAKd,SAASC,EAAT,GAAkD,IAAlCC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,IAAKC,EAAmB,EAAnBA,SAC3C,GAA4CC,EAAAA,EAAAA,UAASb,EAAeU,IAApE,eAAOI,EAAP,KAAuBC,EAAvB,MAEAC,EAAAA,EAAAA,YAAU,WACRD,EAAkBf,EAAeU,MAChC,CAACA,IAEJ,IAAMO,EAAYN,EAAM,SAAW,UAQnC,OACE,iBAAKO,UAAU,kDAAf,UACGJ,EAAeK,OAAS,IACvB,cAAGD,UAAU,OAAb,UACE,uBAAID,OAGR,eAAIC,UAAU,wCAAd,SACGJ,EAAeM,KAAI,SAACC,EAAOC,GAC1B,MAAyCD,EAAMhB,WAAvCkB,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,OAAQlB,EAA1B,EAA0BA,KACpBmB,EAAOF,GAAY,GAAKC,EAASlB,EACjCoB,GAFN,EAAgCC,MAEV,IAAIC,oBAC1B,OACE,yBACE,oBACEC,QAAS,SAACC,GAAD,OArBvB,SAAuBA,EAAmBR,GACxC,IAAMS,EAAiBjB,EAAeQ,GAChCU,GAASC,EAAAA,EAAAA,GAAWF,IAC1BG,EAAAA,EAAAA,GAAUF,EAAQpB,GAkBUuB,CAAcL,EAAGR,IACjCJ,UAAU,mCAFZ,WAIE,gBACEkB,IAAG,kCAA6BV,EAAKW,cAAlC,QACHC,IAAKb,EACLP,UAAU,MAEZ,iBAAMA,UAAU,eAAhB,SAAgCO,QAV3BH,a,kECnDd,SAASW,EAAWM,GACzB,IAAQC,EAASD,EAATC,KACR,UAAiCA,EAAjC,GAAOC,EAAP,KAAaC,EAAb,KAAmBC,EAAnB,KAGA,MAAO,CAACC,KAFQF,EADhB,MAC+B,EAERG,KADJJ,EAAOE,GAAQ,K,qBCJ7B,SAAST,EACdF,EAKApB,GAEsBA,EAASkC,QAAQC,WAC9BC,YAAa,EACtB,IAAMC,EAAarC,EAASkC,QAAQI,cAAcC,SAClDnB,EAAM,SAAeoB,KAAKC,IAAIJ,EAAY,KAC1CrC,EAASkC,QAAQI,YAAYlB,EAAQ,K","sources":["components/List.tsx","util/centre.ts","util/turnGlobe.tsx"],"sourcesContent":["import { SyntheticEvent, useEffect, useState } from \"react\";\nimport { GlobeMethods } from \"react-globe.gl\";\nimport { Country } from \"../lib/country\";\nimport { answerName } from \"../util/answer\";\nimport { findCentre } from \"../util/centre\";\nimport { turnGlobe } from \"../util/turnGlobe\";\n\ntype Props = {\n  guesses: Country[];\n  win: boolean;\n  globeRef: React.MutableRefObject<GlobeMethods>;\n};\n\nfunction reorderGuesses(guessList: Country[]) {\n  return [...guessList].sort((a, b) => {\n    if (a.properties.NAME === answerName) {\n      return -1;\n    } else if (b.properties.NAME === answerName) {\n      return 1;\n    } else {\n      return a.proximity - b.proximity;\n    }\n  });\n}\n\nexport default function List({ guesses, win, globeRef }: Props) {\n  const [orderedGuesses, setOrderedGuesses] = useState(reorderGuesses(guesses));\n\n  useEffect(() => {\n    setOrderedGuesses(reorderGuesses(guesses));\n  }, [guesses]);\n\n  const qualifier = win ? \"Answer\" : \"Closest\";\n\n  function turnToCountry(e: SyntheticEvent, idx: number) {\n    const clickedCountry = orderedGuesses[idx];\n    const coords = findCentre(clickedCountry);\n    turnGlobe(coords, globeRef);\n  }\n\n  return (\n    <div className=\"mx-2 md:ml-10 md:mr-0 py-8 dark:text-white z-30\">\n      {orderedGuesses.length > 0 && (\n        <p className=\"my-1\">\n          <b>{qualifier}</b>\n        </p>\n      )}\n      <ul className=\"grid grid-cols-3 md:grid-cols-4 gap-3\">\n        {orderedGuesses.map((guess, idx) => {\n          const { NAME_LEN, ABBREV, NAME, FLAG } = guess.properties;\n          const name = NAME_LEN >= 10 ? ABBREV : NAME;\n          const flag = (FLAG || \"\").toLocaleLowerCase();\n          return (\n            <li key={idx}>\n              <button\n                onClick={(e) => turnToCountry(e, idx)}\n                className=\"flex items-center cursor-pointer\"\n              >\n                <img\n                  src={`https://flagcdn.com/w20/${flag.toLowerCase()}.png`}\n                  alt={name}\n                  className=\"\"\n                />\n                <span className=\"mx-1 text-md\">{name}</span>\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import { Country } from '../lib/country';\n\nexport function findCentre(country: Country) {\n  const { bbox } = country;\n  const [lng1, lat1, lng2, lat2] = bbox;\n  let latitude = (lat1 + lat2) / 2;\n  const longitude = (lng1 + lng2) / 2;\n  return {lat: latitude, lng: longitude};\n}\n\n\n","import { GlobeMethods } from \"react-globe.gl\";\n\nexport function turnGlobe(\n  coords: {\n    lat: number;\n    lng: number;\n    altitude?: number;\n  },\n  globeRef: React.MutableRefObject<GlobeMethods>\n) {\n  const controls: any = globeRef.current.controls();\n  controls.autoRotate = false;\n  const currentAlt = globeRef.current.pointOfView().altitude;\n  coords[\"altitude\"] = Math.max(currentAlt, 0.05);\n  globeRef.current.pointOfView(coords, 250);\n}\n"],"names":["reorderGuesses","guessList","sort","a","b","properties","NAME","answerName","proximity","List","guesses","win","globeRef","useState","orderedGuesses","setOrderedGuesses","useEffect","qualifier","className","length","map","guess","idx","NAME_LEN","ABBREV","name","flag","FLAG","toLocaleLowerCase","onClick","e","clickedCountry","coords","findCentre","turnGlobe","turnToCountry","src","toLowerCase","alt","country","bbox","lng1","lat1","lng2","lat","lng","current","controls","autoRotate","currentAlt","pointOfView","altitude","Math","max"],"sourceRoot":""}